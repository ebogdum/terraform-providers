variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "name" {
  description = "Name of the Auto Scaling Group. By default generated by Terraform. Conflicts with name_prefix."
  type        = string
  default     = null

  validation {
    condition     = var.name == null || var.name_prefix == null
    error_message = "resource_aws_autoscaling_group, name: Only one of name or name_prefix can be specified."
  }
}

variable "name_prefix" {
  description = "Creates a unique name beginning with the specified prefix. Conflicts with name."
  type        = string
  default     = null
}

variable "max_size" {
  description = "Maximum size of the Auto Scaling Group."
  type        = number

  validation {
    condition     = var.max_size >= 0
    error_message = "resource_aws_autoscaling_group, max_size: Maximum size must be greater than or equal to 0."
  }
}

variable "min_size" {
  description = "Minimum size of the Auto Scaling Group."
  type        = number

  validation {
    condition     = var.min_size >= 0
    error_message = "resource_aws_autoscaling_group, min_size: Minimum size must be greater than or equal to 0."
  }
}

variable "availability_zones" {
  description = "A list of Availability Zones where instances in the Auto Scaling group can be created. Conflicts with vpc_zone_identifier."
  type        = list(string)
  default     = null

  validation {
    condition     = var.availability_zones == null || var.vpc_zone_identifier == null
    error_message = "resource_aws_autoscaling_group, availability_zones: Cannot specify both availability_zones and vpc_zone_identifier."
  }
}

variable "availability_zone_distribution" {
  description = "The instance capacity distribution across Availability Zones."
  type = object({
    capacity_distribution_strategy = string
  })
  default = null

  validation {
    condition = var.availability_zone_distribution == null || contains([
      "balanced-only",
      "balanced-best-effort"
    ], var.availability_zone_distribution.capacity_distribution_strategy)
    error_message = "resource_aws_autoscaling_group, availability_zone_distribution: capacity_distribution_strategy must be one of: balanced-only, balanced-best-effort."
  }
}

variable "capacity_reservation_specification" {
  description = "The capacity reservation specification for the Auto Scaling group."
  type = object({
    capacity_reservation_preference = string
    capacity_reservation_target = optional(object({
      capacity_reservation_ids                 = optional(list(string))
      capacity_reservation_resource_group_arns = optional(list(string))
    }))
  })
  default = null

  validation {
    condition = var.capacity_reservation_specification == null || contains([
      "default",
      "capacity-reservations-only",
      "capacity-reservations-first",
      "none"
    ], var.capacity_reservation_specification.capacity_reservation_preference)
    error_message = "resource_aws_autoscaling_group, capacity_reservation_specification: capacity_reservation_preference must be one of: default, capacity-reservations-only, capacity-reservations-first, none."
  }

  validation {
    condition = var.capacity_reservation_specification == null || var.capacity_reservation_specification.capacity_reservation_target == null || (
      var.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_ids == null ||
      var.capacity_reservation_specification.capacity_reservation_target.capacity_reservation_resource_group_arns == null
    )
    error_message = "resource_aws_autoscaling_group, capacity_reservation_specification: capacity_reservation_ids conflicts with capacity_reservation_resource_group_arns."
  }
}

variable "capacity_rebalance" {
  description = "Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled."
  type        = bool
  default     = null
}

variable "context" {
  description = "Reserved."
  type        = string
  default     = null
}

variable "default_cooldown" {
  description = "Amount of time, in seconds, after a scaling activity completes before another scaling activity can start."
  type        = number
  default     = null

  validation {
    condition     = var.default_cooldown == null || var.default_cooldown >= 0
    error_message = "resource_aws_autoscaling_group, default_cooldown: Default cooldown must be greater than or equal to 0."
  }
}

variable "default_instance_warmup" {
  description = "Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics."
  type        = number
  default     = null

  validation {
    condition     = var.default_instance_warmup == null || var.default_instance_warmup >= 0
    error_message = "resource_aws_autoscaling_group, default_instance_warmup: Default instance warmup must be greater than or equal to 0."
  }
}

variable "launch_configuration" {
  description = "Name of the launch configuration to use."
  type        = string
  default     = null

  validation {
    condition     = (var.launch_configuration != null ? 1 : 0) + (var.launch_template != null ? 1 : 0) + (var.mixed_instances_policy != null ? 1 : 0) == 1
    error_message = "resource_aws_autoscaling_group, launch_configuration: Must specify either launch_configuration, launch_template, or mixed_instances_policy."
  }
}

variable "launch_template" {
  description = "Nested argument with Launch template specification to use to launch instances."
  type = object({
    id      = optional(string)
    name    = optional(string)
    version = optional(string)
  })
  default = null

  validation {
    condition = var.launch_template == null || (
      (var.launch_template.id != null ? 1 : 0) + (var.launch_template.name != null ? 1 : 0) == 1
    )
    error_message = "resource_aws_autoscaling_group, launch_template: Either id or name must be specified."
  }
}

variable "mixed_instances_policy" {
  description = "Configuration block containing settings to define launch targets for Auto Scaling groups."
  type = object({
    instances_distribution = optional(object({
      on_demand_allocation_strategy            = optional(string)
      on_demand_base_capacity                  = optional(number)
      on_demand_percentage_above_base_capacity = optional(number)
      spot_allocation_strategy                 = optional(string)
      spot_instance_pools                      = optional(number)
      spot_max_price                           = optional(string)
    }))
    launch_template = object({
      launch_template_specification = object({
        launch_template_id   = optional(string)
        launch_template_name = optional(string)
        version              = optional(string)
      })
      override = optional(list(object({
        instance_type = optional(string)
        instance_requirements = optional(object({
          accelerator_count = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          accelerator_manufacturers = optional(list(string))
          accelerator_names         = optional(list(string))
          accelerator_total_memory_mib = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          accelerator_types      = optional(list(string))
          allowed_instance_types = optional(list(string))
          bare_metal             = optional(string)
          baseline_ebs_bandwidth_mbps = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          burstable_performance                                   = optional(string)
          cpu_manufacturers                                       = optional(list(string))
          excluded_instance_types                                 = optional(list(string))
          instance_generations                                    = optional(list(string))
          local_storage                                           = optional(string)
          local_storage_types                                     = optional(list(string))
          max_spot_price_as_percentage_of_optimal_on_demand_price = optional(number)
          memory_gib_per_vcpu = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          memory_mib = object({
            min = number
            max = optional(number)
          })
          network_bandwidth_gbps = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          network_interface_count = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          on_demand_max_price_percentage_over_lowest_price = optional(number)
          require_hibernate_support                        = optional(bool)
          spot_max_price_percentage_over_lowest_price      = optional(number)
          total_local_storage_gb = optional(object({
            min = optional(number)
            max = optional(number)
          }))
          vcpu_count = object({
            min = number
            max = optional(number)
          })
        }))
        launch_template_specification = optional(object({
          launch_template_id   = optional(string)
          launch_template_name = optional(string)
          version              = optional(string)
        }))
        weighted_capacity = optional(string)
      })))
    })
  })
  default = null

  validation {
    condition = var.mixed_instances_policy == null || contains([
      "prioritized",
      "lowest-price"
    ], coalesce(var.mixed_instances_policy.instances_distribution.on_demand_allocation_strategy, "prioritized"))
    error_message = "resource_aws_autoscaling_group, mixed_instances_policy: on_demand_allocation_strategy must be one of: prioritized, lowest-price."
  }

  validation {
    condition = var.mixed_instances_policy == null || contains([
      "lowest-price",
      "capacity-optimized",
      "capacity-optimized-prioritized",
      "price-capacity-optimized"
    ], coalesce(var.mixed_instances_policy.instances_distribution.spot_allocation_strategy, "lowest-price"))
    error_message = "resource_aws_autoscaling_group, mixed_instances_policy: spot_allocation_strategy must be one of: lowest-price, capacity-optimized, capacity-optimized-prioritized, price-capacity-optimized."
  }

  validation {
    condition = var.mixed_instances_policy == null || (
      (var.mixed_instances_policy.launch_template.launch_template_specification.launch_template_id != null ? 1 : 0) +
      (var.mixed_instances_policy.launch_template.launch_template_specification.launch_template_name != null ? 1 : 0) == 1
    )
    error_message = "resource_aws_autoscaling_group, mixed_instances_policy: Either launch_template_id or launch_template_name must be specified in launch_template_specification."
  }
}

variable "ignore_failed_scaling_activities" {
  description = "Whether to ignore failed Auto Scaling scaling activities while waiting for capacity. The default is false."
  type        = bool
  default     = null
}

variable "initial_lifecycle_hook" {
  description = "One or more Lifecycle Hooks to attach to the Auto Scaling Group before instances are launched."
  type = list(object({
    name                    = string
    default_result          = optional(string)
    heartbeat_timeout       = optional(number)
    lifecycle_transition    = string
    notification_metadata   = optional(string)
    notification_target_arn = optional(string)
    role_arn                = optional(string)
  }))
  default = null

  validation {
    condition = var.initial_lifecycle_hook == null || alltrue([
      for hook in var.initial_lifecycle_hook : contains([
        "autoscaling:EC2_INSTANCE_LAUNCHING",
        "autoscaling:EC2_INSTANCE_TERMINATING"
      ], hook.lifecycle_transition)
    ])
    error_message = "resource_aws_autoscaling_group, initial_lifecycle_hook: lifecycle_transition must be one of: autoscaling:EC2_INSTANCE_LAUNCHING, autoscaling:EC2_INSTANCE_TERMINATING."
  }

  validation {
    condition = var.initial_lifecycle_hook == null || alltrue([
      for hook in var.initial_lifecycle_hook : hook.default_result == null || contains([
        "CONTINUE",
        "ABANDON"
      ], hook.default_result)
    ])
    error_message = "resource_aws_autoscaling_group, initial_lifecycle_hook: default_result must be one of: CONTINUE, ABANDON."
  }
}

variable "health_check_grace_period" {
  description = "Time (in seconds) after instance comes into service before checking health."
  type        = number
  default     = 300

  validation {
    condition     = var.health_check_grace_period >= 0
    error_message = "resource_aws_autoscaling_group, health_check_grace_period: Health check grace period must be greater than or equal to 0."
  }
}

variable "health_check_type" {
  description = "EC2 or ELB. Controls how health checking is done."
  type        = string
  default     = null

  validation {
    condition = var.health_check_type == null || contains([
      "EC2",
      "ELB"
    ], var.health_check_type)
    error_message = "resource_aws_autoscaling_group, health_check_type: Health check type must be one of: EC2, ELB."
  }
}

variable "instance_maintenance_policy" {
  description = "If this block is configured, add a instance maintenance policy to the specified Auto Scaling group."
  type = object({
    min_healthy_percentage = number
    max_healthy_percentage = number
  })
  default = null

  validation {
    condition = var.instance_maintenance_policy == null || (
      var.instance_maintenance_policy.min_healthy_percentage >= 0 &&
      var.instance_maintenance_policy.min_healthy_percentage <= 100
    )
    error_message = "resource_aws_autoscaling_group, instance_maintenance_policy: min_healthy_percentage must be between 0 and 100."
  }

  validation {
    condition = var.instance_maintenance_policy == null || (
      var.instance_maintenance_policy.max_healthy_percentage >= 100 &&
      var.instance_maintenance_policy.max_healthy_percentage <= 200
    )
    error_message = "resource_aws_autoscaling_group, instance_maintenance_policy: max_healthy_percentage must be between 100 and 200."
  }
}

variable "desired_capacity" {
  description = "Number of Amazon EC2 instances that should be running in the group."
  type        = number
  default     = null

  validation {
    condition     = var.desired_capacity == null || var.desired_capacity >= 0
    error_message = "resource_aws_autoscaling_group, desired_capacity: Desired capacity must be greater than or equal to 0."
  }
}

variable "desired_capacity_type" {
  description = "The unit of measurement for the value specified for desired_capacity. Supported for attribute-based instance type selection only."
  type        = string
  default     = null

  validation {
    condition = var.desired_capacity_type == null || contains([
      "units",
      "vcpu",
      "memory-mib"
    ], var.desired_capacity_type)
    error_message = "resource_aws_autoscaling_group, desired_capacity_type: Desired capacity type must be one of: units, vcpu, memory-mib."
  }
}

variable "force_delete" {
  description = "Allows deleting the Auto Scaling Group without waiting for all instances in the pool to terminate."
  type        = bool
  default     = null
}

variable "load_balancers" {
  description = "List of elastic load balancer names to add to the autoscaling group names. Only valid for classic load balancers."
  type        = list(string)
  default     = null
}

variable "traffic_source" {
  description = "Attaches one or more traffic sources to the specified Auto Scaling group."
  type = list(object({
    identifier = string
    type       = string
  }))
  default = null

  validation {
    condition = var.traffic_source == null || alltrue([
      for source in var.traffic_source : contains([
        "elb",
        "elbv2",
        "vpc-lattice"
      ], source.type)
    ])
    error_message = "resource_aws_autoscaling_group, traffic_source: type must be one of: elb, elbv2, vpc-lattice."
  }
}

variable "vpc_zone_identifier" {
  description = "List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with availability_zones."
  type        = list(string)
  default     = null
}

variable "target_group_arns" {
  description = "Set of aws_alb_target_group ARNs, for use with Application or Network Load Balancing."
  type        = set(string)
  default     = null
}

variable "termination_policies" {
  description = "List of policies to decide how the instances in the Auto Scaling Group should be terminated."
  type        = list(string)
  default     = null

  validation {
    condition = var.termination_policies == null || alltrue([
      for policy in var.termination_policies : contains([
        "OldestInstance",
        "NewestInstance",
        "OldestLaunchConfiguration",
        "ClosestToNextInstanceHour",
        "OldestLaunchTemplate",
        "AllocationStrategy",
        "Default"
      ], policy) || can(regex("^arn:aws:lambda:", policy))
    ])
    error_message = "resource_aws_autoscaling_group, termination_policies: Termination policies must be valid policy names or Lambda function ARNs."
  }
}

variable "suspended_processes" {
  description = "List of processes to suspend for the Auto Scaling Group."
  type        = list(string)
  default     = null

  validation {
    condition = var.suspended_processes == null || alltrue([
      for process in var.suspended_processes : contains([
        "Launch",
        "Terminate",
        "HealthCheck",
        "ReplaceUnhealthy",
        "AZRebalance",
        "AlarmNotification",
        "ScheduledActions",
        "AddToLoadBalancer",
        "InstanceRefresh"
      ], process)
    ])
    error_message = "resource_aws_autoscaling_group, suspended_processes: Suspended processes must be valid process names."
  }
}

variable "tag" {
  description = "Configuration block(s) containing resource tags."
  type = list(object({
    key                 = string
    value               = string
    propagate_at_launch = bool
  }))
  default = null
}

variable "placement_group" {
  description = "Name of the placement group into which you'll launch your instances, if any."
  type        = string
  default     = null
}

variable "metrics_granularity" {
  description = "Granularity to associate with the metrics to collect. The only valid value is 1Minute."
  type        = string
  default     = "1Minute"

  validation {
    condition     = var.metrics_granularity == "1Minute"
    error_message = "resource_aws_autoscaling_group, metrics_granularity: Metrics granularity must be 1Minute."
  }
}

variable "enabled_metrics" {
  description = "List of metrics to collect. The allowed values are defined by the underlying AWS API."
  type        = list(string)
  default     = null
}

variable "wait_for_capacity_timeout" {
  description = "Maximum duration that Terraform should wait for ASG instances to be healthy before timing out."
  type        = string
  default     = "10m"
}

variable "min_elb_capacity" {
  description = "Setting this causes Terraform to wait for this number of instances from this Auto Scaling Group to show up healthy in the ELB only on creation."
  type        = number
  default     = null

  validation {
    condition     = var.min_elb_capacity == null || var.min_elb_capacity >= 0
    error_message = "resource_aws_autoscaling_group, min_elb_capacity: Minimum ELB capacity must be greater than or equal to 0."
  }
}

variable "wait_for_elb_capacity" {
  description = "Setting this will cause Terraform to wait for exactly this number of healthy instances from this Auto Scaling Group in all attached load balancers on both create and update operations."
  type        = number
  default     = null

  validation {
    condition     = var.wait_for_elb_capacity == null || var.wait_for_elb_capacity >= 0
    error_message = "resource_aws_autoscaling_group, wait_for_elb_capacity: Wait for ELB capacity must be greater than or equal to 0."
  }
}

variable "protect_from_scale_in" {
  description = "Whether newly launched instances are automatically protected from termination by Amazon EC2 Auto Scaling when scaling in."
  type        = bool
  default     = null
}

variable "service_linked_role_arn" {
  description = "ARN of the service-linked role that the ASG will use to call other AWS services."
  type        = string
  default     = null
}

variable "max_instance_lifetime" {
  description = "Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds."
  type        = number
  default     = null

  validation {
    condition = var.max_instance_lifetime == null || var.max_instance_lifetime == 0 || (
      var.max_instance_lifetime >= 86400 && var.max_instance_lifetime <= 31536000
    )
    error_message = "resource_aws_autoscaling_group, max_instance_lifetime: Maximum instance lifetime must be 0 or between 86400 and 31536000 seconds."
  }
}

variable "instance_refresh" {
  description = "If this block is configured, start an Instance Refresh when this Auto Scaling Group is updated."
  type = object({
    strategy = string
    preferences = optional(object({
      checkpoint_delay       = optional(number)
      checkpoint_percentages = optional(list(number))
      instance_warmup        = optional(number)
      max_healthy_percentage = optional(number)
      min_healthy_percentage = optional(number)
      skip_matching          = optional(bool)
      auto_rollback          = optional(bool)
      alarm_specification = optional(object({
        alarms = list(string)
      }))
      scale_in_protected_instances = optional(string)
      standby_instances            = optional(string)
    }))
    triggers = optional(set(string))
  })
  default = null

  validation {
    condition     = var.instance_refresh == null || var.instance_refresh.strategy == "Rolling"
    error_message = "resource_aws_autoscaling_group, instance_refresh: Strategy must be Rolling."
  }

  validation {
    condition = var.instance_refresh == null || var.instance_refresh.preferences == null || (
      var.instance_refresh.preferences.max_healthy_percentage == null ||
      (var.instance_refresh.preferences.max_healthy_percentage >= 100 && var.instance_refresh.preferences.max_healthy_percentage <= 200)
    )
    error_message = "resource_aws_autoscaling_group, instance_refresh: max_healthy_percentage must be between 100 and 200."
  }

  validation {
    condition = var.instance_refresh == null || var.instance_refresh.preferences == null || (
      var.instance_refresh.preferences.min_healthy_percentage == null ||
      (var.instance_refresh.preferences.min_healthy_percentage >= 0 && var.instance_refresh.preferences.min_healthy_percentage <= 100)
    )
    error_message = "resource_aws_autoscaling_group, instance_refresh: min_healthy_percentage must be between 0 and 100."
  }

  validation {
    condition = var.instance_refresh == null || var.instance_refresh.preferences == null || var.instance_refresh.preferences.scale_in_protected_instances == null || contains([
      "Refresh",
      "Ignore",
      "Wait"
    ], var.instance_refresh.preferences.scale_in_protected_instances)
    error_message = "resource_aws_autoscaling_group, instance_refresh: scale_in_protected_instances must be one of: Refresh, Ignore, Wait."
  }

  validation {
    condition = var.instance_refresh == null || var.instance_refresh.preferences == null || var.instance_refresh.preferences.standby_instances == null || contains([
      "Terminate",
      "Ignore",
      "Wait"
    ], var.instance_refresh.preferences.standby_instances)
    error_message = "resource_aws_autoscaling_group, instance_refresh: standby_instances must be one of: Terminate, Ignore, Wait."
  }
}

variable "warm_pool" {
  description = "If this block is configured, add a Warm Pool to the specified Auto Scaling group."
  type = object({
    instance_reuse_policy = optional(object({
      reuse_on_scale_in = optional(bool)
    }))
    max_group_prepared_capacity = optional(number)
    min_size                    = optional(number)
    pool_state                  = optional(string)
  })
  default = null

  validation {
    condition = var.warm_pool == null || var.warm_pool.pool_state == null || contains([
      "Stopped",
      "Running",
      "Hibernated"
    ], var.warm_pool.pool_state)
    error_message = "resource_aws_autoscaling_group, warm_pool: pool_state must be one of: Stopped, Running, Hibernated."
  }

  validation {
    condition     = var.warm_pool == null || var.warm_pool.min_size == null || var.warm_pool.min_size >= 0
    error_message = "resource_aws_autoscaling_group, warm_pool: min_size must be greater than or equal to 0."
  }

  validation {
    condition     = var.warm_pool == null || var.warm_pool.max_group_prepared_capacity == null || var.warm_pool.max_group_prepared_capacity >= 0
    error_message = "resource_aws_autoscaling_group, warm_pool: max_group_prepared_capacity must be greater than or equal to 0."
  }
}

variable "force_delete_warm_pool" {
  description = "Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate."
  type        = bool
  default     = null
}