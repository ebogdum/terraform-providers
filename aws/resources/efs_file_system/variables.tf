variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "availability_zone_name" {
  description = "The AWS Availability Zone in which to create the file system. Used to create a file system that uses One Zone storage classes."
  type        = string
  default     = null
}

variable "creation_token" {
  description = "A unique name (a maximum of 64 characters are allowed) used as reference when creating the Elastic File System to ensure idempotent file system creation. By default generated by Terraform."
  type        = string
  default     = null

  validation {
    condition     = var.creation_token == null || can(regex("^.{1,64}$", var.creation_token))
    error_message = "resource_aws_efs_file_system, creation_token must be 1-64 characters long."
  }
}

variable "encrypted" {
  description = "If true, the disk will be encrypted."
  type        = bool
  default     = null
}

variable "kms_key_id" {
  description = "The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true."
  type        = string
  default     = null

  validation {
    condition     = var.kms_key_id == null || can(regex("^arn:aws:kms:", var.kms_key_id))
    error_message = "resource_aws_efs_file_system, kms_key_id must be a valid KMS ARN."
  }
}

variable "lifecycle_policy" {
  description = "A file system lifecycle policy object."
  type = list(object({
    transition_to_archive               = optional(string)
    transition_to_ia                    = optional(string)
    transition_to_primary_storage_class = optional(string)
  }))
  default = []

  validation {
    condition = alltrue([
      for policy in var.lifecycle_policy : alltrue([
        policy.transition_to_archive == null || contains([
          "AFTER_1_DAY", "AFTER_7_DAYS", "AFTER_14_DAYS", "AFTER_30_DAYS",
          "AFTER_60_DAYS", "AFTER_90_DAYS", "AFTER_180_DAYS", "AFTER_270_DAYS", "AFTER_365_DAYS"
        ], policy.transition_to_archive),
        policy.transition_to_ia == null || contains([
          "AFTER_1_DAY", "AFTER_7_DAYS", "AFTER_14_DAYS", "AFTER_30_DAYS",
          "AFTER_60_DAYS", "AFTER_90_DAYS", "AFTER_180_DAYS", "AFTER_270_DAYS", "AFTER_365_DAYS"
        ], policy.transition_to_ia),
        policy.transition_to_primary_storage_class == null || policy.transition_to_primary_storage_class == "AFTER_1_ACCESS"
      ])
    ])
    error_message = "resource_aws_efs_file_system, lifecycle_policy transition values must be valid time periods or access patterns."
  }
}

variable "protection" {
  description = "A file system protection object."
  type = list(object({
    replication_overwrite = optional(string)
  }))
  default = []

  validation {
    condition = alltrue([
      for protection in var.protection :
      protection.replication_overwrite == null || contains(["ENABLED", "DISABLED"], protection.replication_overwrite)
    ])
    error_message = "resource_aws_efs_file_system, protection replication_overwrite must be either ENABLED or DISABLED."
  }
}

variable "performance_mode" {
  description = "The file system performance mode. Can be either 'generalPurpose' or 'maxIO'."
  type        = string
  default     = "generalPurpose"

  validation {
    condition     = contains(["generalPurpose", "maxIO"], var.performance_mode)
    error_message = "resource_aws_efs_file_system, performance_mode must be either 'generalPurpose' or 'maxIO'."
  }
}

variable "provisioned_throughput_in_mibps" {
  description = "The throughput, measured in MiB/s, that you want to provision for the file system. Only applicable with throughput_mode set to provisioned."
  type        = number
  default     = null

  validation {
    condition     = var.provisioned_throughput_in_mibps == null || var.provisioned_throughput_in_mibps > 0
    error_message = "resource_aws_efs_file_system, provisioned_throughput_in_mibps must be greater than 0."
  }
}

variable "tags" {
  description = "A map of tags to assign to the file system."
  type        = map(string)
  default     = {}
}

variable "throughput_mode" {
  description = "Throughput mode for the file system. Valid values: bursting, provisioned, or elastic."
  type        = string
  default     = "bursting"

  validation {
    condition     = contains(["bursting", "provisioned", "elastic"], var.throughput_mode)
    error_message = "resource_aws_efs_file_system, throughput_mode must be one of: bursting, provisioned, or elastic."
  }
}