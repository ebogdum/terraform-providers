variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "name" {
  description = "The name of the ELB. By default generated by Terraform."
  type        = string
  default     = null
}

variable "name_prefix" {
  description = "Creates a unique name beginning with the specified prefix. Conflicts with name."
  type        = string
  default     = null
}

variable "access_logs" {
  description = "An Access Logs block"
  type = object({
    bucket        = string
    bucket_prefix = optional(string)
    interval      = optional(number, 60)
    enabled       = optional(bool, true)
  })
  default = null

  validation {
    condition = var.access_logs == null || (
      var.access_logs.interval == null || contains([5, 60], var.access_logs.interval)
    )
    error_message = "resource_aws_elb, access_logs: interval must be either 5 or 60 minutes."
  }
}

variable "availability_zones" {
  description = "The AZ's to serve traffic in. Required for an EC2-classic ELB."
  type        = list(string)
  default     = null
}

variable "security_groups" {
  description = "A list of security group IDs to assign to the ELB. Only valid if creating an ELB within a VPC."
  type        = list(string)
  default     = null
}

variable "subnets" {
  description = "A list of subnet IDs to attach to the ELB. Required for a VPC ELB."
  type        = list(string)
  default     = null
}

variable "instances" {
  description = "A list of instance ids to place in the ELB pool."
  type        = list(string)
  default     = null
}

variable "internal" {
  description = "If true, ELB will be an internal ELB."
  type        = bool
  default     = false
}

variable "listener" {
  description = "A list of listener blocks."
  type = list(object({
    instance_port      = number
    instance_protocol  = string
    lb_port            = number
    lb_protocol        = string
    ssl_certificate_id = optional(string)
  }))

  validation {
    condition = alltrue([
      for l in var.listener : contains(["HTTP", "HTTPS", "TCP", "SSL"], upper(l.instance_protocol))
    ])
    error_message = "resource_aws_elb, listener: instance_protocol must be one of HTTP, HTTPS, TCP, or SSL."
  }

  validation {
    condition = alltrue([
      for l in var.listener : contains(["HTTP", "HTTPS", "TCP", "SSL"], upper(l.lb_protocol))
    ])
    error_message = "resource_aws_elb, listener: lb_protocol must be one of HTTP, HTTPS, TCP, or SSL."
  }

  validation {
    condition = alltrue([
      for l in var.listener : l.ssl_certificate_id == null || contains(["HTTPS", "SSL"], upper(l.lb_protocol))
    ])
    error_message = "resource_aws_elb, listener: ssl_certificate_id is only valid when lb_protocol is HTTPS or SSL."
  }
}

variable "health_check" {
  description = "A health_check block."
  type = object({
    healthy_threshold   = number
    unhealthy_threshold = number
    target              = string
    interval            = number
    timeout             = number
  })
  default = null

  validation {
    condition     = var.health_check == null || can(regex("^(HTTP|HTTPS|TCP|SSL):[0-9]+.*$", var.health_check.target))
    error_message = "resource_aws_elb, health_check: target must match pattern PROTOCOL:PORT[PATH] where PROTOCOL is HTTP, HTTPS, TCP, or SSL."
  }

  validation {
    condition = var.health_check == null || (
      startswith(upper(var.health_check.target), "HTTP") ?
      can(regex("^(HTTP|HTTPS):[0-9]+/.+$", var.health_check.target)) :
      can(regex("^(TCP|SSL):[0-9]+$", var.health_check.target))
    )
    error_message = "resource_aws_elb, health_check: HTTP/HTTPS targets require PORT and PATH, TCP/SSL targets require only PORT."
  }
}

variable "cross_zone_load_balancing" {
  description = "Enable cross-zone load balancing."
  type        = bool
  default     = true
}

variable "idle_timeout" {
  description = "The time in seconds that the connection is allowed to be idle."
  type        = number
  default     = 60
}

variable "connection_draining" {
  description = "Boolean to enable connection draining."
  type        = bool
  default     = false
}

variable "connection_draining_timeout" {
  description = "The time in seconds to allow for connections to drain."
  type        = number
  default     = 300
}

variable "desync_mitigation_mode" {
  description = "Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync."
  type        = string
  default     = "defensive"

  validation {
    condition     = contains(["monitor", "defensive", "strictest"], var.desync_mitigation_mode)
    error_message = "resource_aws_elb, desync_mitigation_mode: must be one of monitor, defensive, or strictest."
  }
}

variable "tags" {
  description = "A map of tags to assign to the resource."
  type        = map(string)
  default     = {}
}