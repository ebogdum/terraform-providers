variable "action" {
  description = "Lambda action to allow in this statement (e.g., lambda:InvokeFunction)"
  type        = string

  validation {
    condition     = can(regex("^lambda:", var.action))
    error_message = "resource_aws_lambda_permission, action must start with 'lambda:' (e.g., 'lambda:InvokeFunction')."
  }
}

variable "function_name" {
  description = "Name or ARN of the Lambda function"
  type        = string

  validation {
    condition     = length(var.function_name) > 0
    error_message = "resource_aws_lambda_permission, function_name cannot be empty."
  }
}

variable "principal" {
  description = "AWS service or account that invokes the function (e.g., s3.amazonaws.com, sns.amazonaws.com, AWS account ID, or AWS IAM principal)"
  type        = string

  validation {
    condition     = length(var.principal) > 0
    error_message = "resource_aws_lambda_permission, principal cannot be empty."
  }
}

variable "event_source_token" {
  description = "Event Source Token for Alexa Skills"
  type        = string
  default     = null
}

variable "function_url_auth_type" {
  description = "Lambda Function URL authentication type. Valid values: AWS_IAM or NONE. Only valid with lambda:InvokeFunctionUrl action"
  type        = string
  default     = null

  validation {
    condition     = var.function_url_auth_type == null || contains(["AWS_IAM", "NONE"], var.function_url_auth_type)
    error_message = "resource_aws_lambda_permission, function_url_auth_type must be either 'AWS_IAM' or 'NONE'."
  }
}

variable "principal_org_id" {
  description = "AWS Organizations ID to grant permission to all accounts under this organization"
  type        = string
  default     = null
}

variable "qualifier" {
  description = "Lambda function version or alias name"
  type        = string
  default     = null
}

variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration"
  type        = string
  default     = null
}

variable "source_account" {
  description = "AWS account ID of the source owner for cross-account access, S3, or SES"
  type        = string
  default     = null

  validation {
    condition     = var.source_account == null || can(regex("^[0-9]{12}$", var.source_account))
    error_message = "resource_aws_lambda_permission, source_account must be a 12-digit AWS account ID."
  }
}

variable "source_arn" {
  description = "ARN of the source resource granting permission to invoke the Lambda function"
  type        = string
  default     = null

  validation {
    condition     = var.source_arn == null || can(regex("^arn:aws:", var.source_arn))
    error_message = "resource_aws_lambda_permission, source_arn must be a valid ARN starting with 'arn:aws:'."
  }
}

variable "statement_id" {
  description = "Statement identifier. Generated by Terraform if not provided"
  type        = string
  default     = null
}

variable "statement_id_prefix" {
  description = "Statement identifier prefix. Conflicts with statement_id"
  type        = string
  default     = null
}