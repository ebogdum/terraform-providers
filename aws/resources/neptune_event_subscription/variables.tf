variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "enabled" {
  description = "A boolean flag to enable/disable the subscription. Defaults to true."
  type        = bool
  default     = true
}

variable "event_categories" {
  description = "A list of event categories for a source_type that you want to subscribe to. Run `aws neptune describe-event-categories` to find all the event categories."
  type        = list(string)
  default     = null
  validation {
    condition = var.event_categories == null ? true : alltrue([
      for category in var.event_categories : contains([
        "maintenance",
        "availability",
        "creation",
        "backup",
        "restoration",
        "recovery",
        "deletion",
        "failover",
        "failure",
        "notification",
        "configuration change",
        "read replica"
      ], category)
    ])
    error_message = "resource_aws_neptune_event_subscription, event_categories must be one of: maintenance, availability, creation, backup, restoration, recovery, deletion, failover, failure, notification, configuration change, read replica."
  }
}

variable "name" {
  description = "The name of the Neptune event subscription. By default generated by Terraform."
  type        = string
  default     = null
  validation {
    condition     = var.name == null || can(regex("^[a-zA-Z0-9-]+$", var.name))
    error_message = "resource_aws_neptune_event_subscription, name must contain only alphanumeric characters and hyphens."
  }
}

variable "name_prefix" {
  description = "The name of the Neptune event subscription. Conflicts with name."
  type        = string
  default     = null
  validation {
    condition     = var.name_prefix == null || can(regex("^[a-zA-Z0-9-]+$", var.name_prefix))
    error_message = "resource_aws_neptune_event_subscription, name_prefix must contain only alphanumeric characters and hyphens."
  }
}

variable "sns_topic_arn" {
  description = "The ARN of the SNS topic to send events to."
  type        = string
  validation {
    condition     = can(regex("^arn:aws[a-zA-Z-]*:sns:[a-z0-9-]+:[0-9]{12}:[a-zA-Z0-9-_]+$", var.sns_topic_arn))
    error_message = "resource_aws_neptune_event_subscription, sns_topic_arn must be a valid SNS topic ARN."
  }
}

variable "source_ids" {
  description = "A list of identifiers of the event sources for which events will be returned. If not specified, then all sources are included in the response. If specified, a source_type must also be specified."
  type        = list(string)
  default     = null
}

variable "source_type" {
  description = "The type of source that will be generating the events. Valid options are db-instance, db-security-group, db-parameter-group, db-snapshot, db-cluster or db-cluster-snapshot. If not set, all sources will be subscribed to."
  type        = string
  default     = null
  validation {
    condition = var.source_type == null ? true : contains([
      "db-instance",
      "db-security-group",
      "db-parameter-group",
      "db-snapshot",
      "db-cluster",
      "db-cluster-snapshot"
    ], var.source_type)
    error_message = "resource_aws_neptune_event_subscription, source_type must be one of: db-instance, db-security-group, db-parameter-group, db-snapshot, db-cluster, db-cluster-snapshot."
  }
}

variable "tags" {
  description = "A map of tags to assign to the resource. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level."
  type        = map(string)
  default     = {}
}

variable "timeouts" {
  description = "Configuration options for timeouts"
  type = object({
    create = optional(string, "40m")
    delete = optional(string, "40m")
    update = optional(string, "40m")
  })
  default = null
}