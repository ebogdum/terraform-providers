variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "meta_store_manager_role_arn" {
  description = "The Amazon Resource Name (ARN) used to create and update the AWS Glue table. This table contains partitions generated by the ingestion and normalization of AWS log sources and custom sources."
  type        = string

  validation {
    condition     = can(regex("^arn:aws[a-zA-Z-]*:iam::[0-9]{12}:role/.+", var.meta_store_manager_role_arn))
    error_message = "resource_aws_securitylake_data_lake, meta_store_manager_role_arn must be a valid IAM role ARN."
  }
}

variable "configuration" {
  description = "Specify the Region or Regions that will contribute data to the rollup region."
  type = list(object({
    region = string
    encryption_configuration = optional(object({
      kms_key_id = optional(string)
    }))
    lifecycle_configuration = optional(object({
      expiration = optional(object({
        days = optional(number)
      }))
      transition = optional(list(object({
        days          = optional(number)
        storage_class = optional(string)
      })))
    }))
    replication_configuration = optional(object({
      regions  = optional(list(string))
      role_arn = optional(string)
    }))
  }))

  validation {
    condition     = length(var.configuration) > 0
    error_message = "resource_aws_securitylake_data_lake, configuration must contain at least one configuration block."
  }

  validation {
    condition = alltrue([
      for config in var.configuration : can(regex("^[a-z]{2}-[a-z]+-[0-9]{1}$", config.region))
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration region must be a valid AWS region format (e.g., us-east-1)."
  }

  validation {
    condition = alltrue([
      for config in var.configuration :
      config.encryption_configuration == null ||
      config.encryption_configuration.kms_key_id == null ||
      can(regex("^(S3_MANAGED_KEY|alias/[a-zA-Z0-9/_-]+|[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}|arn:aws[a-zA-Z-]*:kms:[a-z0-9-]+:[0-9]{12}:key/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})$", config.encryption_configuration.kms_key_id))
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration encryption_configuration kms_key_id must be 'S3_MANAGED_KEY', a valid KMS key ID, alias, or ARN."
  }

  validation {
    condition = alltrue([
      for config in var.configuration :
      config.lifecycle_configuration == null ||
      config.lifecycle_configuration.expiration == null ||
      config.lifecycle_configuration.expiration.days == null ||
      (config.lifecycle_configuration.expiration.days >= 1 && config.lifecycle_configuration.expiration.days <= 2147483647)
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration lifecycle_configuration expiration days must be between 1 and 2147483647."
  }

  validation {
    condition = alltrue([
      for config in var.configuration :
      config.lifecycle_configuration == null ||
      config.lifecycle_configuration.transition == null ||
      alltrue([
        for transition in config.lifecycle_configuration.transition :
        transition.days == null || (transition.days >= 1 && transition.days <= 2147483647)
      ])
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration lifecycle_configuration transition days must be between 1 and 2147483647."
  }

  validation {
    condition = alltrue([
      for config in var.configuration :
      config.lifecycle_configuration == null ||
      config.lifecycle_configuration.transition == null ||
      alltrue([
        for transition in config.lifecycle_configuration.transition :
        transition.storage_class == null ||
        contains(["STANDARD_IA", "ONEZONE_IA", "REDUCED_REDUNDANCY", "GLACIER", "DEEP_ARCHIVE", "INTELLIGENT_TIERING", "GLACIER_IR"], transition.storage_class)
      ])
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration lifecycle_configuration transition storage_class must be one of: STANDARD_IA, ONEZONE_IA, REDUCED_REDUNDANCY, GLACIER, DEEP_ARCHIVE, INTELLIGENT_TIERING, GLACIER_IR."
  }

  validation {
    condition = alltrue([
      for config in var.configuration :
      config.replication_configuration == null ||
      config.replication_configuration.regions == null ||
      alltrue([
        for region in config.replication_configuration.regions :
        can(regex("^[a-z]{2}-[a-z]+-[0-9]{1}$", region))
      ])
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration replication_configuration regions must be valid AWS region formats (e.g., us-east-1)."
  }

  validation {
    condition = alltrue([
      for config in var.configuration :
      config.replication_configuration == null ||
      config.replication_configuration.role_arn == null ||
      can(regex("^arn:aws[a-zA-Z-]*:iam::[0-9]{12}:role/.+", config.replication_configuration.role_arn))
    ])
    error_message = "resource_aws_securitylake_data_lake, configuration replication_configuration role_arn must be a valid IAM role ARN."
  }
}

variable "tags" {
  description = "Key-value map of resource tags. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level."
  type        = map(string)
  default     = {}
}