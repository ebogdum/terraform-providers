variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "platform_id" {
  description = "The ID of the platform that is used by the target signing profile."
  type        = string

  validation {
    condition     = var.platform_id != null && var.platform_id != ""
    error_message = "resource_aws_signer_signing_profile, platform_id is required and cannot be empty."
  }
}

variable "name" {
  description = "A unique signing profile name. By default generated by Terraform. Signing profile names are immutable and cannot be reused after canceled."
  type        = string
  default     = null
}

variable "name_prefix" {
  description = "A signing profile name prefix. Terraform will generate a unique suffix. Conflicts with name."
  type        = string
  default     = null

  validation {
    condition     = var.name == null || var.name_prefix == null
    error_message = "resource_aws_signer_signing_profile, name_prefix conflicts with name. Only one can be specified."
  }
}

variable "signature_validity_period" {
  description = "The validity period for a signing job."
  type = object({
    type  = string
    value = number
  })
  default = null

  validation {
    condition = var.signature_validity_period == null || (
      var.signature_validity_period.type != null &&
      contains(["DAYS", "MONTHS", "YEARS"], var.signature_validity_period.type)
    )
    error_message = "resource_aws_signer_signing_profile, signature_validity_period type must be one of: DAYS, MONTHS, YEARS."
  }

  validation {
    condition = var.signature_validity_period == null || (
      var.signature_validity_period.value != null &&
      var.signature_validity_period.value > 0
    )
    error_message = "resource_aws_signer_signing_profile, signature_validity_period value must be a positive number."
  }
}

variable "signing_material" {
  description = "The AWS Certificate Manager certificate that will be used to sign code with the new signing profile."
  type = object({
    certificate_arn = string
  })
  default = null

  validation {
    condition = var.signing_material == null || (
      var.signing_material.certificate_arn != null &&
      var.signing_material.certificate_arn != "" &&
      can(regex("^arn:aws:acm:", var.signing_material.certificate_arn))
    )
    error_message = "resource_aws_signer_signing_profile, signing_material certificate_arn must be a valid ACM certificate ARN."
  }
}

variable "signing_parameters" {
  description = "Map of key-value pairs for signing. These can include any information that you want to use during signing."
  type        = map(string)
  default     = null
}

variable "tags" {
  description = "A list of tags associated with the signing profile."
  type        = map(string)
  default     = null
}