variable "region" {
  description = "Region where this resource will be managed. Defaults to the Region set in the provider configuration."
  type        = string
  default     = null
}

variable "certificate" {
  description = "The Amazon Resource Name (ARN) of the AWS Certificate Manager (ACM) certificate. This is required when protocols is set to FTPS"
  type        = string
  default     = null
}

variable "domain" {
  description = "The domain of the storage system that is used for file transfers. Valid values are: S3 and EFS. The default value is S3."
  type        = string
  default     = "S3"

  validation {
    condition     = contains(["S3", "EFS"], var.domain)
    error_message = "resource_aws_transfer_server, domain must be one of: S3, EFS."
  }
}

variable "protocols" {
  description = "Specifies the file transfer protocol or protocols over which your file transfer protocol client can connect to your server's endpoint. This defaults to SFTP. The available protocols are: AS2, SFTP, FTPS, FTP"
  type        = list(string)
  default     = ["SFTP"]

  validation {
    condition     = alltrue([for protocol in var.protocols : contains(["AS2", "SFTP", "FTPS", "FTP"], protocol)])
    error_message = "resource_aws_transfer_server, protocols must contain only valid values: AS2, SFTP, FTPS, FTP."
  }
}

variable "endpoint_details" {
  description = "The virtual private cloud (VPC) endpoint settings that you want to configure for your SFTP server."
  type = object({
    address_allocation_ids = optional(list(string))
    security_group_ids     = optional(list(string))
    subnet_ids             = optional(list(string))
    vpc_endpoint_id        = optional(string)
    vpc_id                 = optional(string)
  })
  default = null
}

variable "endpoint_type" {
  description = "The type of endpoint that you want your SFTP server connect to. If you connect to a VPC (or VPC_ENDPOINT), your SFTP server isn't accessible over the public internet. If you want to connect your SFTP server via public internet, set PUBLIC. Defaults to PUBLIC."
  type        = string
  default     = "PUBLIC"

  validation {
    condition     = contains(["PUBLIC", "VPC", "VPC_ENDPOINT"], var.endpoint_type)
    error_message = "resource_aws_transfer_server, endpoint_type must be one of: PUBLIC, VPC, VPC_ENDPOINT."
  }
}

variable "invocation_role" {
  description = "Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an identity_provider_type of API_GATEWAY."
  type        = string
  default     = null
}

variable "host_key" {
  description = "RSA, ECDSA, or ED25519 private key (e.g., as generated by the ssh-keygen -t rsa -b 2048 -N \"\" -m PEM -f my-new-server-key commands)."
  type        = string
  default     = null
  sensitive   = true
}

variable "url" {
  description = "URL of the service endpoint used to authenticate users with an identity_provider_type of API_GATEWAY."
  type        = string
  default     = null
}

variable "identity_provider_type" {
  description = "The mode of authentication enabled for this service. The default value is SERVICE_MANAGED, which allows you to store and access SFTP user credentials within the service."
  type        = string
  default     = "SERVICE_MANAGED"

  validation {
    condition     = contains(["SERVICE_MANAGED", "API_GATEWAY", "AWS_DIRECTORY_SERVICE", "AWS_LAMBDA"], var.identity_provider_type)
    error_message = "resource_aws_transfer_server, identity_provider_type must be one of: SERVICE_MANAGED, API_GATEWAY, AWS_DIRECTORY_SERVICE, AWS_LAMBDA."
  }
}

variable "directory_id" {
  description = "The directory service ID of the directory service you want to connect to with an identity_provider_type of AWS_DIRECTORY_SERVICE."
  type        = string
  default     = null
}

variable "function" {
  description = "The ARN for a lambda function to use for the Identity provider with an identity_provider_type of AWS_LAMBDA."
  type        = string
  default     = null
}

variable "sftp_authentication_methods" {
  description = "For SFTP-enabled servers with an identity_provider_type of API_GATEWAY or AWS_LAMBDA. Valid values are PASSWORD, PUBLIC_KEY, PUBLIC_KEY_OR_PASSWORD and PUBLIC_KEY_AND_PASSWORD. Default value is: PUBLIC_KEY_OR_PASSWORD."
  type        = string
  default     = "PUBLIC_KEY_OR_PASSWORD"

  validation {
    condition     = contains(["PASSWORD", "PUBLIC_KEY", "PUBLIC_KEY_OR_PASSWORD", "PUBLIC_KEY_AND_PASSWORD"], var.sftp_authentication_methods)
    error_message = "resource_aws_transfer_server, sftp_authentication_methods must be one of: PASSWORD, PUBLIC_KEY, PUBLIC_KEY_OR_PASSWORD, PUBLIC_KEY_AND_PASSWORD."
  }
}

variable "logging_role" {
  description = "Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP users' activity to your Amazon CloudWatch logs for monitoring and auditing purposes."
  type        = string
  default     = null
}

variable "force_destroy" {
  description = "A boolean that indicates all users associated with the server should be deleted so that the Server can be destroyed without error. The default value is false. This option only applies to servers configured with a SERVICE_MANAGED identity_provider_type."
  type        = bool
  default     = false
}

variable "post_authentication_login_banner" {
  description = "Specify a string to display when users connect to a server. This string is displayed after the user authenticates. The SFTP protocol does not support post-authentication display banners."
  type        = string
  default     = null
}

variable "pre_authentication_login_banner" {
  description = "Specify a string to display when users connect to a server. This string is displayed before the user authenticates."
  type        = string
  default     = null
}

variable "protocol_details" {
  description = "The protocol settings that are configured for your server."
  type = object({
    as2_transports              = optional(list(string))
    passive_ip                  = optional(string)
    set_stat_option             = optional(string)
    tls_session_resumption_mode = optional(string)
  })
  default = null

  validation {
    condition = var.protocol_details == null || (
      (var.protocol_details.as2_transports == null || alltrue([for transport in var.protocol_details.as2_transports : contains(["HTTP"], transport)])) &&
      (var.protocol_details.set_stat_option == null || contains(["DEFAULT", "ENABLE_NO_OP"], var.protocol_details.set_stat_option)) &&
      (var.protocol_details.tls_session_resumption_mode == null || contains(["DISABLED", "ENABLED", "ENFORCED"], var.protocol_details.tls_session_resumption_mode))
    )
    error_message = "resource_aws_transfer_server, protocol_details validation failed. as2_transports must contain only HTTP, set_stat_option must be DEFAULT or ENABLE_NO_OP, tls_session_resumption_mode must be DISABLED, ENABLED, or ENFORCED."
  }
}

variable "s3_storage_options" {
  description = "Specifies whether or not performance for your Amazon S3 directories is optimized. This is disabled by default."
  type = object({
    directory_listing_optimization = optional(string)
  })
  default = null

  validation {
    condition = var.s3_storage_options == null || (
      var.s3_storage_options.directory_listing_optimization == null || contains(["DISABLED", "ENABLED"], var.s3_storage_options.directory_listing_optimization)
    )
    error_message = "resource_aws_transfer_server, s3_storage_options.directory_listing_optimization must be DISABLED or ENABLED."
  }
}

variable "security_policy_name" {
  description = "Specifies the name of the security policy that is attached to the server. Default value is: TransferSecurityPolicy-2018-11."
  type        = string
  default     = "TransferSecurityPolicy-2018-11"

  validation {
    condition = contains([
      "TransferSecurityPolicy-2018-11",
      "TransferSecurityPolicy-2020-06",
      "TransferSecurityPolicy-2022-03",
      "TransferSecurityPolicy-2023-05",
      "TransferSecurityPolicy-2024-01",
      "TransferSecurityPolicy-2025-03",
      "TransferSecurityPolicy-FIPS-2020-06",
      "TransferSecurityPolicy-FIPS-2023-05",
      "TransferSecurityPolicy-FIPS-2024-01",
      "TransferSecurityPolicy-FIPS-2024-05",
      "TransferSecurityPolicy-FIPS-2025-03",
      "TransferSecurityPolicy-PQ-SSH-Experimental-2023-04",
      "TransferSecurityPolicy-PQ-SSH-FIPS-Experimental-2023-04",
      "TransferSecurityPolicy-Restricted-2018-11",
      "TransferSecurityPolicy-Restricted-2020-06",
      "TransferSecurityPolicy-Restricted-2024-06",
      "TransferSecurityPolicy-SshAuditCompliant-2025-02"
    ], var.security_policy_name)
    error_message = "resource_aws_transfer_server, security_policy_name must be one of the supported Transfer Family security policies."
  }
}

variable "structured_log_destinations" {
  description = "A set of ARNs of destinations that will receive structured logs from the transfer server such as CloudWatch Log Group ARNs. If provided this enables the transfer server to emit structured logs to the specified locations."
  type        = list(string)
  default     = null
}

variable "tags" {
  description = "A map of tags to assign to the resource. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the provider-level."
  type        = map(string)
  default     = {}
}

variable "workflow_details" {
  description = "Specifies the workflow details."
  type = object({
    on_upload = optional(object({
      execution_role = string
      workflow_id    = string
    }))
    on_partial_upload = optional(object({
      execution_role = string
      workflow_id    = string
    }))
  })
  default = null
}